#+title: Slim Lisp Butts

* About
:PROPERTIES:
:EXPORT_FILE_NAME: doc-org-pretty-tags
:END:

This is a minor mode to make fat lisp butts appear slim.

** Why
:PROPERTIES:
:ID:       6bc15117-c35d-4935-8d28-fd8252e519be
:END:

The real cause of lisp's unpopularity are the fat lisp butts which can
often be seen in lisp code.

Example:
#+begin_src text
))))))))))))))))))))))))))))))))
#+end_src

Nobody wants to talk about this but at the same time nobody wants to see
these ugly horrific monsters.

** What the lisp-butt-mode offers

#+name: description-what
#+begin_src org
lisp-butt-mode brings fat lisp butts in shape.

With lisp-butt-mode e.g.

	))))))))))))))))))))))))))))))))

gets displayed nicely as (pun intended):

	).)
#+end_src

** Concrete Use :easy:

#+name: description-activate
#+begin_src org
There is a global `lisp-butt-global-mode' and a local `lisp-butt-mode'
variant.

Global:

- Toggle the mode with {M-x lisp-butt-global-mode RET}.
- Activate the mode with {C-u M-x lisp-butt-global-mode RET}.
- Deactivate the mode with {C-u -1 M-x lisp-butt-global-mode RET}.

Local:

- Toggle the mode with {M-x lisp-butt-mode RET}.
- Activate the mode with {C-u M-x lisp-butt-mode RET}.
- Deactivate the mode with {C-u -1 M-x lisp-butt-mode RET}.

Unveil the full butt at the cursor temporarily with

    {M-x lisp-butt-unfontify}

Some configuration is possible.  See

    {M-x customize-group RET lisp-butt RET}

To turn on lisp-butt-mode automatically see

    {M-x customize-variable RET lisp-butt-global-mode RET}

See also the literate source file for modifying the whole thing.  E.g. see
https://gitlab.com/marcowahl/lisp-butt-mode.
#+end_src

** Install

Choose one of the following ways to install =lisp-butt-mode=.

*** Directly

File =lisp-butt-mode.el= must be available.

Add the respective lines to your init.el:

#+begin_src emacs-lisp :tangle no
(push "<path/to/lisp-butt-mode.el>" load-path)
(require 'lisp-butt-mode)
#+end_src

*** Via Package Manager

=lisp-butt-mode= is available via melpa (https://melpa.org).  This
means =lisp-butt-mode= should be easily accessible per package
manager.

** Metadata

*** Version

#+name: lisp-butt-version
#+begin_src text
1.0.3
#+end_src

*** Typical Metadata

Author, contact, dependencies.

#+name: package-metadata
#+begin_src text :noweb yes
Author: Marco Wahl <marcowahlsoft@gmail.com>
Maintainer: Marco Wahl <marcowahlsoft@gmail.com>
Created: [2019-07-11]
Version: <<lisp-butt-version>>
Package-Requires: ((emacs "25"))
Keywords: lisp
URL: https://gitlab.com/marcowahl/lisp-butt-mode
#+end_src

*** Copyright

#+name: copyright
#+begin_src text :noweb yes
Copyright 2019 Marco Wahl

<<package-metadata>>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
#+end_src

** About this Program
:PROPERTIES:
:ID:       76033920-34fc-4854-96af-9df084ae300d
:END:

This section gives some additional information about the program and
might mainly be of interest for people who want to develop the program
further.

*** Literate Program

=lisp-butt-mode= is a literate program written in Org mode.  The
emacs-lisp program =lisp-butt-mode.el= is generated from the literate
source =lisp-butt-mode.org= by a step called tangle.

**** Tangle

{ M-x org-babel-tangle RET } in file =lisp-butt-mode.org= triggers
the tangle.  This generates file =lisp-butt-mode.el= if this goes
well.

**** Detangle

Recall the opportunity to use the property line

#+begin_src text
:header-args:emacs-lisp+: :comments both
#+end_src

instead of

#+begin_src text
:header-args:emacs-lisp+: :comments no
#+end_src

in section [[Functionality]] to create tangle-info in the tangled file.
The additional info can be used with function org-babel-detangle.
Detangle means to edit the tangled file and bring these changes to the
literate source file.

*** Files

- lisp-butt-mode.org ::  The literate source
- readme.org :: This is the same (hardlinked) as the literate source
  file.
  - With this filename its content shows up nicely and automatically
    e.g. on the front page of gitlab since they support Orgmode files.
- LICENSE :: GPL3 license.
- *.el :: Elisp source files.
  - Note: these files are derived from the literate source.

*** Contact

Send feedback, wishes, bug reports, contributions etc. to
marcowahlsoft@gmail.com.

** Tasks

*** Open

*** Closed

**** DONE Make lisp-butt-unfontify functional for emacs -Q

- Weird: lisp-butt-unfontify works in the maintainer's environment.
- [2019-08-18 Sun] added an additional (conditional) decomposition.

**** DONE Write cleanly to switch on/off for a file

Hint: Currently [2019-07-11 8:26] the realization is a bit weird.

**** DONE Provide a global variant

Hint: look how it's done at org-pretty-tags.

* Code

** meta

#+name: page-break
#+begin_src emacs-lisp :tangle no


#+end_src

** Functionality
:PROPERTIES:
:header-args:emacs-lisp: :tangle lisp-butt-mode.el
:END:

*** First Lines
:PROPERTIES:
:ID:       15f7cf10-3b11-4373-b2e7-8b89f1dbafbc
:END:

#+begin_src emacs-lisp :noweb yes
;;; lisp-butt-mode.el --- Slim Lisp Butts -*- lexical-binding: t -*-
<<page-break>>
;; THIS FILE HAS BEEN GENERATED.  For sustainable program-development
;; edit the literate source file "lisp-butt-mode.org".  Find also
;; additional information there.
<<page-break>>
;; <<copyright>>
<<page-break>>
;;; Commentary:

;; <<description-what>>

;; <<description-activate>>
#+end_src

**** code section header
:PROPERTIES:
:ID:       12bb6a92-216b-4320-a1b5-ef7061836764
:END:

#+begin_src emacs-lisp :noweb yes
<<page-break>>
;;; Code:
#+end_src

*** Middle Lines
:PROPERTIES:
:header-args:emacs-lisp+: :comments no
:ID:       3b8dcfaf-b4df-4683-b5df-9a1a54208b3c
:END:

:meta:
Recall the lines for the properties to control some of the tangle for
this subtree.

# :header-args:emacs-lisp+: :comments no
# :header-args:emacs-lisp+: :comments both
:END:

**** customizable items
:PROPERTIES:
:ID:       6e30b8b7-76a5-47f0-972a-5fb113330034
:END:

#+begin_src emacs-lisp :noweb yes
<<page-break>>
;; customizable

#+end_src

***** the hole
:PROPERTIES:
:ID:       99ea61ea-a4bb-4c8c-8ec0-d45655bf0a27
:END:

The default replacement looks like

#+begin_src text
).)
#+end_src

The character in the middle can be customized to get e.g.

#+begin_src text
)*)
#+end_src

#+begin_src emacs-lisp
(defcustom lisp-butt-hole
  ?.
  "The character replacing the hole."
  :type 'character
  :group 'lisp-butt)
#+end_src

***** the lighter
:PROPERTIES:
:ID:       c3b66311-68ab-4cab-acfe-6cd96870d7d5
:END:

The indication string (aka lighter) of the mode in the mode line can
be customized.

#+begin_src emacs-lisp
(defcustom lisp-butt-mode-lighter
  " (.)"
  "Text in the mode line to indicate that the mode is on."
  :type 'string
  :group 'lisp-butt)
#+end_src

***** the modes for "global" mode
:PROPERTIES:
:ID:       df83e986-da18-4e27-a088-1a2383086137
:END:

The modes considered by lisp-butt-global-mode.

#+begin_src emacs-lisp
(defcustom lisp-butt-modes
  '(lisp-mode emacs-lisp-mode clojure-mode)
  "Modes considered by `lisp-butt-global-mode'."
  :type '(repeat symbol)
  :group 'lisp-butt)
#+end_src

**** variables
:PROPERTIES:
:ID:       010604e0-1177-488c-bb6a-837c7216fdde
:END:

#+begin_src emacs-lisp
(defvar lisp-butt-regexp ")\\())+\\))")

(defvar lisp-butt-pattern
  `((,lisp-butt-regexp
     (1 (compose-region
         (match-beginning 1) (match-end 1)
         lisp-butt-hole)
        nil))))
#+end_src

**** functions
:PROPERTIES:
:ID:       2846e96a-7344-4deb-8589-9fbdaeeffd5e
:END:

***** extension of the font lock system
:PROPERTIES:
:ID:       6c42d95c-525c-4960-a843-f1e5870ae76a
:END:

#+begin_src emacs-lisp :noweb yes
<<page-break>>
;; core

(defun lisp-butt-set-slim-display ()
  "Function to produce nicer Lisp butts."
  (font-lock-add-keywords nil lisp-butt-pattern))

(defun lisp-butt-unset-slim-display ()
  "Function to undo the nicer Lisp butts."
  (font-lock-remove-keywords nil lisp-butt-pattern)
  (save-match-data
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward lisp-butt-regexp nil t)
        (decompose-region (match-beginning 0) (match-end 0))))))
#+end_src

***** direct unfontification
:PROPERTIES:
:ID:       e578a2ac-de33-4dad-acb8-c5025b7d5489
:END:

#+begin_src emacs-lisp
;;;###autoload
(defun lisp-butt-unfontify ()
  "Unfontify Lisp butt at point."
  (interactive)
  (while (and (< (point-min) (point))
              (string= ")" (buffer-substring-no-properties (1- (point)) (point))))
    (backward-char))
  (save-match-data
    (re-search-forward ")*")
    (font-lock-unfontify-region
     (match-beginning 0) (match-end 0))
    (let ((composi (find-composition (- (match-end 0) 2))))
      (when composi
	(decompose-region (nth 0 composi) (nth 1 composi))))))
#+end_src

**** the mode
:PROPERTIES:
:ID:       8fa0ad24-a4e6-4d19-b18b-751c9711918d
:END:

#+begin_src emacs-lisp :noweb yes
<<page-break>>
;; mode definition

;;;###autoload
(define-minor-mode lisp-butt-mode
  "Display slim lisp butts."
  :lighter lisp-butt-mode-lighter
  (cond
   (lisp-butt-mode (lisp-butt-set-slim-display))
   (t (lisp-butt-unset-slim-display)))
  (font-lock-flush))

;;;###autoload
(define-global-minor-mode lisp-butt-global-mode
  lisp-butt-mode
  (lambda ()
    (when (apply #'derived-mode-p lisp-butt-modes)
        (lisp-butt-mode))))
#+end_src

*** Last Lines
:PROPERTIES:
:ID:       300d188f-9b90-4bd8-9d65-78823402a3de
:END:

#+begin_src emacs-lisp :noweb yes
<<page-break>>
(provide 'lisp-butt-mode)

;;; lisp-butt-mode.el ends here
#+end_src

** Testing

*** Run Unittests

 - Evaluate the following source block to tangle the necessary and run
   the unittests e.g. by following the link [[elisp:(progn (org-babel-next-src-block) (org-babel-execute-src-block))]]

# <(trigger tests)>

#+begin_src emacs-lisp :results silent
(require 'ert)
(let ((apath "."))
  (org-babel-tangle-file "lisp-butt-mode.org")
  (ert-delete-all-tests)
  (push apath load-path)
  (load "lisp-butt-mode.el")
  (load "lisp-butt-mode-test.el")
  (ert t)
  (setq load-path (remove apath load-path))
  (run-with-timer 1 nil (lambda () (switch-to-buffer-other-window "*ert*"))))
#+end_src

*** Unittests
:PROPERTIES:
:header-args:emacs-lisp: :tangle lisp-butt-mode-test.el
:END:

Note: the name with suffix =-test= has a meaning for melpa: the file does
not get included in the package.

**** First lines
:PROPERTIES:
:ID:       0afc357c-dbc7-447b-8123-8b725e9c6e7d
:END:

#+begin_src emacs-lisp :padline no :noweb yes
;;; lisp-butt-mode-test.el --- tests  -*- lexical-binding: t -*-


;; THIS FILE HAS BEEN GENERATED.  see the literate source.

;; <<copyright>>


#+end_src

**** Tests
:PROPERTIES:
:header-args:emacs-lisp+: :comments both
:ID:       dac141b6-e0a8-4312-8022-90b08fce4c84
:END:

#+begin_src emacs-lisp
(require 'lisp-butt-mode)
#+end_src

***** existence of the program
:PROPERTIES:
:ID:       64deaaad-d23f-485b-97a7-3ed650afcd03
:END:

#+begin_src emacs-lisp
(ert-deftest 0f10d2c6dfc87cf21674ab887bf748ba6d296d1d ()
  "test if the basic function is available at all."
  (with-temp-buffer
    (lisp-interaction-mode)
    (lisp-butt-mode)))
#+end_src

***** mode on/off

****** turn on the mode
:PROPERTIES:
:ID:       4c932e52-a9a7-49e4-9df1-9161289bef0e
:END:

#+begin_src emacs-lisp
(ert-deftest 9d64a351fdea5be260e3018eb6f3d2cd605c1cfc ()
  "test buttification when turning on lisp-butt-mode."
  (with-temp-buffer
    (lisp-mode)
    (font-lock-mode)
    (insert "(((())))")
    (lisp-butt-mode)
    (font-lock-ensure)
    (should (find-composition 6))))
#+end_src

****** turn off the mode
:PROPERTIES:
:ID:       086aa050-db0a-45ed-b03b-4e1d722e0125
:END:

#+begin_src emacs-lisp
(ert-deftest 9a156d463d7bc4acefdfc1290cbad50da50b5e91 ()
  "test buttification when turning on lisp-butt-mode."
  (with-temp-buffer
    (lisp-mode)
    (font-lock-mode)
    (insert "(((())))")
    (lisp-butt-mode)
    (font-lock-ensure)
    (lisp-butt-mode -1)
    (should-not (find-composition 6))))
#+end_src

***** decompose butt at point
:PROPERTIES:
:ID:       d758d5b9-c75f-43d5-8dc7-8ee12800dcc0
:END:

#+begin_src emacs-lisp
(ert-deftest f5eed54b59f148d9fd2df4d178b97f6cea632eef ()
  "test buttification when turning on lisp-butt-mode."
  (with-temp-buffer
    (lisp-mode)
    (font-lock-mode)
    (insert "(((())))")
    (lisp-butt-mode)
    (font-lock-ensure)
    (goto-char 6)
    (lisp-butt-unfontify)
    (should-not (find-composition 6))))
#+end_src

**** Last Lines
:PROPERTIES:
:ID:       b4d9edb9-2c12-4110-a47d-361ce458f129
:END:

#+begin_src emacs-lisp

(provide 'lisp-butt-test)

;;; lisp-butt-test.el ends here
#+end_src
